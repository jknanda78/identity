{"version":3,"sources":["serviceWorker.ts","store/types/index.tsx","store/reducers/user-profile.reducer.tsx","store/reducers/global-notification.reducer.tsx","store/reducers/observable.reducer.tsx","store/utils/validators.util.tsx","store/reducers/form.reducer.tsx","store/reducers/utils/add-form-input.util.tsx","store/reducers/utils/validate-form-input.util.tsx","store/reducers/utils/update-form-input-value.util.tsx","store/reducers/utils/validate-form.util.tsx","store/reducers/index.tsx","middlewares/navigation.middleware.tsx","middlewares/observable.middleware.tsx","middlewares/notification.middleware.tsx","store/index.tsx","components/input-field.tsx","store/actions/global-notification.action.tsx","store/actions/form.action.tsx","components/containers/input-field.container.tsx","components/layout.tsx","components/link.tsx","components/containers/link.container.tsx","components/primary-button.tsx","components/containers/primary-button.container.tsx","components/form.tsx","components/containers/form.container.tsx","pages/sign-in.page.tsx","store/actions/observable.action.tsx","pages/containers/sign-in.container.tsx","pages/create-account.page.tsx","pages/containers/create-account.container.tsx","components/user-layout.tsx","pages/user-profile.page.tsx","pages/containers/user-profile.container.tsx","routes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HTTP_REQUEST","userProfileReducer","handleActions","state","action","payload","Object","assign","firstName","lastName","email","phoneNumber","globalNotificationReducer","notify","notifyType","notifyMessage","observableReducer","isSubmitting","regex","errors","validators","input","test","length","getValidator","key","obj","formReducer","formId","newFormInput","error","fieldId","hasError","hasValue","validator","value","newFormsState","forms","newField","forEach","form","fields","addFormInput","isPristine","isValid","isFormValid","field","fieldVal","validateFormInput","updateFormInputVal","validateForm","rootReducer","combineReducers","formManager","globalNotification","observable","router","userProfile","Navigation","store","next","type","challenge","dispatch","push","data","Observable","method","url","setTimeout","axios","then","res","catch","err","Notification","response","message","alert","history","createBrowserHistory","basename","process","routerMiddleware","createRouterMiddleware","FormInput","props","handleOnBlur","e","actions","id","onBlurInput","handleOnChange","onChangeInput","currentTarget","addNewInput","this","editable","label","placeholder","fieldError","findError","htmlFor","className","onBlur","onChange","React","Component","Type","UNSET_GLOBAL_NOTIFICATION","SET_GLOBAL_NOTIFICATION","setGlobalNotification","createAction","unsetGlobalNotification","ADD_NEW_INPUT_FIELD","CREATE_NEW_FORM","CLEAR_FORM","ONBLUR_INPUT_FIELD","ONCHANGE_INPUT_FIELD","SUBMIT_FORM","createNewForm","onFormSubmit","clearForm","formSubmission","formActions","notifyActions","connect","bindActionCreators","InputField","Layout","children","title","CSSTransition","in","timeout","classNames","unmountOnExit","Link","onClick","PrimaryButton","disabled","undefined","Form","handleOnSubmit","onSubmit","formFields","preventDefault","val","setKeyValue","SignInPage","notification","httpRequest","email_address","password","pwd","observableActions","CreateAccount","a","CreateAccountPage","UserLayout","UserProfilePage","nameEditable","emailEditable","phoneEditable","toggleEditName","edit","setState","toggleEditEmail","toggleEditPhone","userProfileState","exact","from","to","path","component","SignIn","UserProfile","initialState","middlewares","navigationMiddleware","observableMiddleware","notificationMiddleware","enhancer","composeEnhancers","compose","applyMiddleware","createStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.80f34423.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * Redux Actions\n * Patterns:\n * Post - @@post/<ACTION_NAME>\n * Get - @@get/<ACTION_NAME>\n * Put - @@put/<ACTION_NAME>\n * Delete - @@delete/<ACTION_NAME>\n * Navigate - @@navigate2/<ACTION_NAME>\n * Notify - @@notify/<ACTION_NAME>\n */\n// Navigation\nexport const NAVIGATE = \"@@navigate2/APP_ROUTE\";\n// User Profile\nexport const SET_USER_PROFILE = \"@@post/SET_USER_PROFILE\";\n// Notification\nexport const SET_GLOBAL_NOTIFICATION = \"@@notify/SET_GLOBAL_NOTIFICATION\";\nexport const UNSET_GLOBAL_NOTIFICATION = \"@@notify/UNSET_GLOBAL_NOTIFICATION\";\nexport const SET_FIELD_NOTIFICATION = \"@@notify/SET_FIELD_NOTIFICATION\";\n// Forms\nexport const CLEAR_FORM = \"@@form/CLEAR_FORM\";\nexport const CREATE_NEW_FORM = \"@@form/CREATE_NEW_FORM\";\nexport const SUBMIT_FORM = \"@@form/SUBMIT_FORM\";\n// Inputfield\nexport const ADD_NEW_INPUT_FIELD = \"@@form-field/ADD_NEW_INPUT_FIELD\";\nexport const ONBLUR_INPUT_FIELD = \"@@form-field/ONBLUR_INPUT_FIELD\";\nexport const ONCHANGE_INPUT_FIELD = \"@@form-field/ONCHANGE_INPUT_FIELD\";\nexport const ONFOCUS_INPUT_FIELD = \"@@form-field/ONFOCUS_INPUT_FIELD\";\n// Observable\nexport const HTTP_REQUEST = \"@@observable/HTTP_REQUEST\";\nexport const HTTP_REQUEST_FAILURE = \"@@observable/HTTP_REQUEST_FAILURE\";\nexport const HTTP_REQUEST_SUCCESS = \"@@observable/HTTP_REQUEST_SUCCESS\";\n","import { handleActions, Action } from \"redux-actions\";\nimport {\n  UserProfileModel,\n  UserProfilePayload,\n} from \"../models/user-profile.model\";\nimport { SET_USER_PROFILE } from \"../types\";\n\nexport type State = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n};\n\nconst initialState: State = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  phoneNumber: \"\",\n};\n\nexport const userProfileReducer = handleActions<State, UserProfileModel>(\n  {\n    [SET_USER_PROFILE]: (state: State, action: Action<UserProfilePayload>) => {\n      const newState = action.payload\n        ? Object.assign({}, state, action.payload as any)\n        : state;\n      return newState;\n    },\n  },\n  initialState\n);\n","import { handleActions, Action } from \"redux-actions\";\nimport {\n  GlobalNotificationModel,\n  GlobalNotificationPayload,\n} from \"../models/global-notification.model\";\nimport { UNSET_GLOBAL_NOTIFICATION, SET_GLOBAL_NOTIFICATION } from \"../types\";\n\nexport type State = {\n  notify: boolean;\n  notifyType: \"error\" | \"success\" | \"info\" | \"\";\n  notifyMessage: string;\n};\n\nconst initialState: State = {\n  notify: false,\n  notifyType: \"\",\n  notifyMessage: \"\",\n};\n\nexport const globalNotificationReducer = handleActions<\n  State,\n  GlobalNotificationModel\n>(\n  {\n    [SET_GLOBAL_NOTIFICATION]: (\n      state: State,\n      action: Action<GlobalNotificationPayload>\n    ) => {\n      const newState = action.payload\n        ? Object.assign({}, state, action.payload as any, { notify: true })\n        : state;\n      return newState;\n    },\n    [UNSET_GLOBAL_NOTIFICATION]: (state: State) => {\n      return Object.assign({}, state, {\n        notify: false,\n        notifyType: \"\",\n        notifyMessage: \"\",\n      });\n    },\n  },\n  initialState\n);\n","import { handleActions, Action } from \"redux-actions\";\nimport {\n  HttpRequestModel\n} from \"../models/observable.model\";\nimport {\n  HTTP_REQUEST,\n  HTTP_REQUEST_FAILURE,\n  HTTP_REQUEST_SUCCESS\n} from \"../types\";\n\nexport type State = {\n  isSubmitting: boolean;\n};\n\nconst initialState: State = {\n  isSubmitting: false\n};\n\nexport const observableReducer = handleActions<\n  State,\n  HttpRequestModel\n>(\n  {\n    [HTTP_REQUEST]: (\n      state: State,\n      action: Action<HttpRequestModel>\n    ) => {\n      return Object.assign({}, state, {\n        isSubmitting: true\n      });\n    },\n    [HTTP_REQUEST_FAILURE]: (state: State) => {\n      return Object.assign({}, state, {\n        isSubmitting: false\n      });\n    },\n    [HTTP_REQUEST_SUCCESS]: (state: State) => {\n      return Object.assign({}, state, {\n        isSubmitting: false\n      });\n    },\n  },\n  initialState\n);\n","// REGEX TYPES\nconst VALID_EMAIL_REGX = \"VALID_EMAIL_REGX\";\nconst PASS_LENGTH_REGX = \"PASS_LENGTH_REGX\";\nconst VALID_PASS_REGX = \"VALID_PASS_REGEX\";\nconst NO_CONSECUTIVE_REGX = \"NO_CONSECUTIVE_REGX\";\n\n// ERROR TYPES\nconst VALID_EMAIL_ERR = \"ENTER_VALID_EMAIL\";\nconst PASS_LENGTH_ERR = \"PASS_LENGTH_NOT_MET_ERR\";\nconst VALID_PASS_ERR = \"VALID_PASS_ERR\";\nconst NO_CONSECUTIVE_ERR = \"NO_CONSECUTIVE_ERR\";\nconst EMPTY_FIELD_ERR = \"EMPTY_FIELD_ERR\";\n\n// FORM INPUT TYPES\nconst EMAIL = \"email\";\nconst PASSWORD = \"password\";\nconst DEFAULT = \"default\";\n\ntype regexValidators = {\n  [VALID_EMAIL_REGX]: RegExp;\n  [PASS_LENGTH_REGX]: RegExp;\n  [VALID_PASS_REGX]: RegExp;\n};\n\nconst regex: regexValidators = {\n  [VALID_EMAIL_REGX]: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n  [PASS_LENGTH_REGX]: /^.{7,15}$/,\n  [VALID_PASS_REGX]: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\\W]).*$/\n};\n\ntype validationErrors = {\n  [VALID_EMAIL_ERR]: string;\n  [PASS_LENGTH_ERR]: string;\n  [VALID_PASS_ERR]: string;\n  [EMPTY_FIELD_ERR]: string;\n};\n\nconst errors: validationErrors = {\n  [VALID_EMAIL_ERR]: \"Please enter a valid email address.\",\n  [PASS_LENGTH_ERR]: \"Password must be 9 to 15 characters.\",\n  [VALID_PASS_ERR]: \"Must have at least 1 number, 1 uppercase and 1 special character.\",\n  [EMPTY_FIELD_ERR]: \"Please enter a valid \"\n};\n\nexport type validateFormInput = {\n  [EMAIL]: Function;\n  [PASSWORD]: Function;\n  [DEFAULT]: Function;\n};\n\nexport const validators: validateFormInput = {\n  [EMAIL]: (input: string) => {\n    if (!regex[VALID_EMAIL_REGX].test(input)) {\n      return errors[VALID_EMAIL_ERR];\n    }\n  },\n  [PASSWORD]: (input: string) => {\n    if (!regex[PASS_LENGTH_REGX].test(input)) {\n      return errors[PASS_LENGTH_ERR];\n    } else if (!regex[VALID_PASS_REGX].test(input)) {\n      return errors[VALID_PASS_ERR];\n    }\n  },\n  [DEFAULT]: (input: string) => {\n    if (input.length === 0) {\n      return errors[EMPTY_FIELD_ERR];\n    }\n  }\n};\n\nexport const getValidator = <V extends validateFormInput, P extends keyof V>(key: P) => (obj: V) =>\n  obj[key];\n","import { handleActions, Action } from \"redux-actions\";\nimport {\n  FormModel,\n  FormPayload,\n  FormState,\n} from \"@models/form.model\";\nimport {\n  ADD_NEW_INPUT_FIELD,\n  CREATE_NEW_FORM,\n  CLEAR_FORM,\n  ONBLUR_INPUT_FIELD,\n  ONCHANGE_INPUT_FIELD,\n  SUBMIT_FORM\n} from \"@types\";\n// UTILS\nimport addFormInput from \"@reducers/utils/add-form-input.util\";\nimport updateFormInputVal from \"@reducers/utils/update-form-input-value.util\";\nimport validateFormInput from \"@reducers/utils/validate-form-input.util\";\nimport validateForm from \"@reducers/utils/validate-form.util\";\n\nexport type State = {\n  forms: Array<FormState>;\n};\n\nconst initialState: State = {\n  forms: []\n};\n\nexport const formReducer = handleActions<\n  State,\n  FormModel\n>(\n  {\n    [ADD_NEW_INPUT_FIELD]: (\n      state: State,\n      action: Action<FormPayload>\n    ) => {\n      const { formId, fieldId, validator } = action.payload as any;\n      const newFormInput = {\n        error: \"\",\n        fieldId,\n        hasError: false,\n        hasValue: false,\n        validator,\n        value: \"\"\n      };\n      const newFormsState = addFormInput(state.forms, formId, newFormInput);\n      return {forms: [...newFormsState]};\n    },\n    [CREATE_NEW_FORM]: (\n      state: State,\n      action: Action<FormPayload>\n    ) => {\n      const { formId } = action.payload as any;\n      const newForm = {\n        fields: [],\n        formId,\n        isPristine: true,\n        isSubmitting: false,\n        isValid: false\n      };\n\n      return { forms: [ newForm, ...state.forms ] };\n    },\n    [ONBLUR_INPUT_FIELD]: (\n      state: State,\n      action: Action<Object>\n    ) => {\n      const { formId, fieldId } = action.payload as any;\n      const newFormsState = validateFormInput(state.forms, formId, fieldId);\n      return {forms: [...newFormsState]};\n    },\n    [ONCHANGE_INPUT_FIELD]: (\n      state: State,\n      action: Action<Object>\n    ) => {\n      const { formId, fieldId, value } = action.payload as any;\n      const newFormsState = updateFormInputVal(state.forms, formId, fieldId, value);\n      return {forms: [...newFormsState]};\n    },\n    [SUBMIT_FORM]: (\n      state: State,\n      action: Action<FormPayload>\n    ) => {\n      const { formId } = action.payload as any;\n      const newFormsState = validateForm(state.forms, formId);\n      return {forms: [...newFormsState]};\n    },\n    [CLEAR_FORM]: (state: State) => {\n      return Object.assign({}, state, {});\n    },\n  },\n  initialState\n);\n","import {\n  Field,\n  FormState,\n} from \"@models/form.model\";\n\nconst getKeyValue = <FS extends FormState, P extends keyof FS>(key: P) => (obj: FS) =>\n  obj[key];\n\nconst setKeyValue = <FS extends FormState, P extends keyof FS, V extends FS[P]>(key: P) => (obj: FS) => (val: V) =>\n  obj[key] = val;\n\nconst deepCopyForms = (forms: Array<FormState>) => {\n  const clonedForms = [] as Array<FormState>;\n\n  forms.forEach((form: FormState) => {\n    const newItem = {} as FormState;\n    let prop: keyof FormState;\n\n    for (prop in form) {\n      const propValue = getKeyValue(prop)(form) as any;\n      if (propValue.constructor === Array) {\n        const val: Array<Field> = [...propValue];\n        setKeyValue(prop)(newItem)(val);\n      } else {\n        setKeyValue(prop)(newItem)(propValue);\n      }\n    }\n\n    clonedForms.push(newItem);\n  });\n\n  return clonedForms;\n};\n\nexport default (forms: Array<FormState>, formId: string, newField: Field) => {\n  forms.forEach((form) => {\n    // Find the formId from forms[]\n    if (form.formId === formId) {\n      form.fields = [newField, ...form.fields];\n    }\n  });\n\n  return forms;\n};\n","import { FormState } from \"@models/form.model\";\nimport { getValidator, validators } from \"@store/utils/validators.util\";\n\nexport default (forms: Array<FormState>, formId: string, fieldId: string) => { \n  forms.forEach((form) => {\n    // Find the formId from forms[]\n    if (form.formId === formId) {\n      form.isPristine = false;\n      const fields = form.fields;\n      let isFormValid = true;\n      // Find the fieldId from fields[]\n      fields.forEach((field) => {\n        if (field.fieldId === fieldId) {\n          const fieldVal = field.value;\n          const validator = field.validator;\n          const error = getValidator(validator)(validators)(fieldVal);\n\n          if (error) {\n            field.error = error;\n            field.hasError = true;\n            isFormValid = false;\n          } else {\n            field.error = \"\";\n            field.hasError = false;\n          }\n        }\n      });\n\n      form.isValid = isFormValid;\n    }\n  });\n\n  return forms;\n};\n","import { FormState } from \"@models/form.model\"; \n\nexport default (forms: Array<FormState>, formId: string, fieldId: string, fieldVal: string) => { \n  forms.forEach((form) => {\n    // Find the formId from forms[]\n    if (form.formId === formId) {\n      form.isPristine = false;\n      const fields = form.fields;\n      // Find the fieldId from fields[]\n      fields.forEach((field) => {\n        if (field.fieldId === fieldId) {\n          if (fieldVal.length) {\n            field.hasValue = true;\n            field.value = fieldVal;\n          } else {\n            field.hasValue = false;\n            field.value = \"\";\n          }\n        }\n      });\n    }\n  });\n\n  return forms;\n};\n","import { FormState } from \"@models/form.model\";\nimport { getValidator, validators } from \"@store/utils/validators.util\";\n\nexport default (forms: Array<FormState>, formId: string) => { \n  forms.forEach((form) => {\n    // Find the formId from forms[]\n    if (form.formId === formId) {\n      form.isPristine = false;\n      const fields = form.fields;\n      let isFormValid = true;\n      // Find the fieldId from fields[]\n      fields.forEach((field) => {\n          const fieldVal = field.value;\n          const validator = field.validator;\n          const error = getValidator(validator)(validators)(fieldVal);\n\n          if (error) {\n            field.error = error;\n            field.hasError = true;\n            isFormValid = false;\n          } else {\n            field.error = \"\";\n            field.hasError = false;\n          }\n      });\n\n      form.isValid = isFormValid;\n    }\n  });\n\n  return forms;\n};\n","import { combineReducers } from \"redux\";\nimport { routerReducer as router, RouterState } from \"react-router-redux\";\nimport {\n  userProfileReducer,\n  State as UserProfileState,\n} from \"./user-profile.reducer\";\nimport {\n  globalNotificationReducer,\n  State as GlobalNotificationState,\n} from \"./global-notification.reducer\";\nimport {\n  observableReducer,\n  State as ObservableState\n} from \"./observable.reducer\";\nimport { formReducer, State as FormState } from \"./form.reducer\";\n\ninterface StoreEnhancerState {}\n\nexport interface RootState extends StoreEnhancerState {\n  formManager: FormState;\n  globalNotification: GlobalNotificationState;\n  observable: ObservableState;\n  router: RouterState;\n  userProfile: UserProfileState;\n}\n\nexport const rootReducer = combineReducers<RootState>({\n  formManager: formReducer as any,\n  globalNotification: globalNotificationReducer as any,\n  observable: observableReducer as any,\n  router,\n  userProfile: userProfileReducer as any,\n});\n","import { Middleware } from \"redux\";\nimport { HTTP_REQUEST_SUCCESS, NAVIGATE } from \"@types\";\nimport { push } from \"react-router-redux\";\n\nconst Navigation: Middleware = (store: any) => (next: any) => (action: any) => {\n  const { type, payload = {} } = action || {};\n\n  if (type === NAVIGATE && payload.challenge) {\n    const { challenge } = payload;\n    store.dispatch(push(challenge));\n  } else if (type === HTTP_REQUEST_SUCCESS && payload.data) {\n    const { challenge, ...data } = payload?.data || {};\n    store.dispatch(push(challenge));\n  }\n\n  return next(action);\n};\n\nexport default Navigation;\n","import { Middleware } from \"redux\";\nimport axios from \"axios\";\nimport {\n  HTTP_REQUEST_FAILURE,\n  HTTP_REQUEST,\n  HTTP_REQUEST_SUCCESS,\n} from \"@types\";\n\nconst Observable: Middleware = (store: any) => (next: any) => (action: any) => {\n  const { type, payload = {} } = action || {};\n  const { data, method, url } = payload;\n  \n  if (type === HTTP_REQUEST) {\n    setTimeout(() => {\n      axios({method, url, data})\n        .then((res) => {\n          store.dispatch({\n            type: HTTP_REQUEST_SUCCESS,\n            payload: res\n          });\n        })\n        .catch((err) => {\n          store.dispatch({\n            type: HTTP_REQUEST_FAILURE,\n            payload: err\n          });\n        });\n    }, 2000);\n  }\n\n  return next(action);\n};\n\n// Side-effects\nexport default Observable;\n","import { Middleware } from \"redux\";\nimport {\n  HTTP_REQUEST_FAILURE,\n  SET_GLOBAL_NOTIFICATION\n} from \"@types\";\n\nconst Notification: Middleware = (store: any) => (next: any) => (action: any) => {\n  const { type, payload = {} } = action || {};\n\n  if (type === HTTP_REQUEST_FAILURE) {\n    const { message, alert } = payload?.response?.data || {};\n\n    store.dispatch({\n      type: SET_GLOBAL_NOTIFICATION,\n      payload: {\n        notifyType: alert,\n        notifyMessage: message,\n      }\n    });\n  }\n\n  return next(action);\n};\n\nexport default Notification;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware as createRouterMiddleware } from \"react-router-redux\";\nimport { createBrowserHistory } from \"history\";\nimport { rootReducer, RootState } from \"./reducers\";\nimport navigationMiddleware from \"@middlewares/navigation.middleware\";\nimport observableMiddleware from \"@middlewares/observable.middleware\";\nimport notificationMiddleware from \"@middlewares/notification.middleware\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\n// Create history\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n\n// Create router middleware using history\nexport const routerMiddleware = createRouterMiddleware(history);\n\nexport const configureStore = (initialState?: RootState) => {\n  // add middlewares\n  const middlewares = [\n    navigationMiddleware,\n    observableMiddleware,\n    notificationMiddleware,\n    routerMiddleware\n  ];\n\n  // add enhancer\n  const composeEnhancers =\n    process.env.NODE_ENV !== \"production\" &&\n    typeof window === \"object\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose;\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n  return createStore(rootReducer, initialState, enhancer);\n};\n","import React from \"react\";\nimport { FormModel } from \"@models/form.model\"\nimport \"@styles/input-field.css\";\n\ntype FormInputProps = {\n  actions: any;\n  editable?: boolean;\n  formManager: FormModel;\n  formId?: string;\n  id: string;\n  label: string;\n  placeholder?: string;\n  type: \"text\" | \"password\" | \"email\";\n  validator?: \"email\" | \"password\" | \"default\";\n  value?: string;\n};\n\nexport default class FormInput extends React.Component<FormInputProps> {\n  constructor(props: FormInputProps) {\n    super(props);\n    const { formId, id: fieldId, validator } = props;\n\n    props.actions.addNewInput({\n      formId,\n      fieldId,\n      validator\n    });\n  }\n\n  handleOnBlur = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const { actions, formId, id: fieldId } = this.props;\n\n    actions.onBlurInput({\n      formId,\n      fieldId\n    });\n  };\n\n  handleOnChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const { actions, formId, id: fieldId } = this.props;\n\n    actions.onChangeInput({\n      formId,\n      fieldId,\n      value: e.currentTarget.value\n    });\n  };\n\n  render() {\n    const {\n      formId,\n      formManager,\n      editable = true,\n      id,\n      label,\n      placeholder = \"\",\n      type,\n      value = \"\",\n    } = this.props;\n    const findError: Function = () => {\n      let error: string = \"\";\n\n      formManager.forms.forEach((form) => {\n        if (form.formId === formId) {\n          const fields = form.fields;\n          fields.forEach((field) => {\n            if (field.fieldId === id && field.hasError) {\n              error = field.error;\n            }\n          });\n        }\n      });\n\n      return error;\n    };\n    const fieldError: string = findError();\n\n    return editable ? (\n      <div>\n        <label htmlFor={id} className={fieldError ? \"error\" : \"\"}>{label}</label>\n        <p>\n          <input\n            id={id}\n            placeholder={placeholder}\n            type={type}\n            onBlur={this.handleOnBlur}\n            onChange={this.handleOnChange}\n          />\n        </p>\n        <p className=\"field-error\">\n          {fieldError ? fieldError : \"\"}\n        </p>\n      </div>\n    ) : (\n      <div>\n        <label htmlFor={id}>{label}</label>\n        <p>{value}</p>\n      </div>\n    );\n  }\n}\n","import { createAction } from \"redux-actions\";\nimport { GlobalNotificationPayload } from \"../models/global-notification.model\";\nimport { UNSET_GLOBAL_NOTIFICATION, SET_GLOBAL_NOTIFICATION } from \"../types\";\n\nexport const Type = {\n  UNSET_GLOBAL_NOTIFICATION,\n  SET_GLOBAL_NOTIFICATION,\n};\n\nexport const setGlobalNotification = createAction<GlobalNotificationPayload>(\n  Type.SET_GLOBAL_NOTIFICATION\n);\n\nexport const unsetGlobalNotification = createAction<GlobalNotificationPayload>(\n  Type.UNSET_GLOBAL_NOTIFICATION\n);\n","import { createAction } from \"redux-actions\";\nimport { FormPayload } from \"../models/form.model\";\nimport {\n  ADD_NEW_INPUT_FIELD,\n  CREATE_NEW_FORM,\n  CLEAR_FORM,\n  ONBLUR_INPUT_FIELD,\n  ONCHANGE_INPUT_FIELD,\n  SUBMIT_FORM\n} from \"../types\";\n\nexport const Type = {\n  ADD_NEW_INPUT_FIELD,\n  CREATE_NEW_FORM,\n  CLEAR_FORM,\n  ONBLUR_INPUT_FIELD,\n  ONCHANGE_INPUT_FIELD,\n  SUBMIT_FORM,\n};\n\nexport const addNewInput = createAction<FormPayload>(\n  Type.ADD_NEW_INPUT_FIELD\n);\n\nexport const createNewForm = createAction<FormPayload>(\n  Type.CREATE_NEW_FORM\n);\n\nexport const onBlurInput = createAction<FormPayload>(\n  Type.ONBLUR_INPUT_FIELD\n);\n\nexport const onChangeInput = createAction<FormPayload>(\n  Type.ONCHANGE_INPUT_FIELD\n);\n\nexport const onFormSubmit = createAction<FormPayload>(\n  Type.ONCHANGE_INPUT_FIELD\n);\n\nexport const clearForm = createAction<FormPayload>(\n  Type.CLEAR_FORM\n);\n\nexport const formSubmission = createAction<FormPayload>(\n  Type.SUBMIT_FORM\n);\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { RootState } from \"@reducers/index\";\nimport InputField from \"@components/input-field\";\nimport * as notifyActions from \"@actions/global-notification.action\";\nimport * as formActions from \"@actions/form.action\";\n\n// Add all the actions\nconst actions: any = Object.assign({}, formActions, notifyActions);\n\nconst mapSateToProps = (state: RootState) => ({\n  formManager: state.formManager\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(InputField);\n","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"@styles/normalize.css\";\nimport \"@styles/layout.css\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  notify: boolean;\n  notifyMessage: String;\n  notifyType: String;\n  title: String;\n};\n\nconst Layout: React.FunctionComponent<LayoutProps> = (props) => {\n  const { children, notify, notifyMessage, notifyType, title } = props;\n  return (\n    <div className=\"standard\">\n      <div className=\"wrapper\">\n        <section className=\"logo\">\n          <div>&#123; .js &#125;</div>\n        </section>\n        <section className=\"notify\">\n          <CSSTransition\n            in={notify}\n            timeout={500}\n            classNames=\"display\"\n            unmountOnExit\n          >\n            <div className=\"notification\">\n              <div className={`message ${notifyType}`}>{notifyMessage}</div>\n            </div>\n          </CSSTransition>\n        </section>\n        <main>\n          <header className=\"header\">\n            <h1>{title}</h1>\n          </header>\n          <section className=\"main\">{children}</section>\n        </main>\n        <section className=\"footer\">\n          <footer>&#169; copyright 2020</footer>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\n\ntype LinkProps = {\n  actions: any;\n  onClick?: Function;\n  id: string;\n  type: \"button\" | \"submit\";\n  value: string;\n};\n\nconst Link: React.FunctionComponent<LinkProps> = (props) => {\n  const { actions, onClick, id, type, value } = props;\n  const onClickHandler = (e: React.SyntheticEvent) => {\n    actions.unsetGlobalNotification();\n    typeof onClick === \"function\" && onClick(e);\n  };\n  return (\n    <div className=\"buttonAsLink\">\n      <button type={type} id={id} value={value} onClick={onClickHandler}>\n        {value}\n      </button>\n    </div>\n  );\n};\n\nexport default Link;\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport Link from \"@components/link\";\nimport * as notifyActions from \"@actions/global-notification.action\";\n\n// Add all the actions\nconst actions: any = Object.assign({}, notifyActions);\n\nconst mapSateToProps = () => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(Link);\n","import React from \"react\";\nimport { HttpRequestModel } from \"@models/observable.model\";\n\ntype ButtonProps = {\n  actions: any;\n  observable: HttpRequestModel;\n  onClick?: Function;\n  id: string;\n  type: \"button\" | \"submit\";\n  value: string;\n};\n\nconst PrimaryButton: React.FunctionComponent<ButtonProps> = (props) => {\n  const { actions, onClick, id, type, value } = props;\n  const { isSubmitting } = props.observable;\n  const onClickHandler = (e: React.SyntheticEvent) => {\n    actions.unsetGlobalNotification();\n    typeof onClick === \"function\" && onClick(e);\n  };\n  return (\n    <div className=\"primary\">\n      <button\n        type={type}\n        id={id}\n        value={value}\n        onClick={onClickHandler}\n        disabled={isSubmitting ? true : undefined}>\n          <span className={isSubmitting ? \"spinner-active\" : \"spinner-inactive\"}></span> {value}\n      </button>\n    </div>\n  );\n};\n\nexport default PrimaryButton;\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { RootState } from \"@reducers/index\";\nimport PrimaryButton from \"@components/primary-button\";\nimport * as notifyActions from \"@actions/global-notification.action\";\n\n// Add all the actions\nconst actions: any = Object.assign({}, notifyActions);\n\nconst mapSateToProps = (state: RootState) => ({\n  observable: state.observable\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(PrimaryButton);\n","import React from \"react\";\nimport { Field, FormModel, FormFields } from \"@models/form.model\";\n\ntype FormProps = {\n  actions: any;\n  children: React.ReactNode;\n  formManager: FormModel;\n  id: string;\n  onSubmit?: Function;\n};\n\ntype FormState = {};\n\nconst setKeyValue = <OBJ extends FormFields, P extends keyof OBJ, V extends OBJ[P]>(key: P) => (obj: OBJ) => (val: V) =>\n  obj[key] = val;\n\nclass Form extends React.Component<FormProps, FormState> {\n  constructor(props: FormProps) {\n    super(props);\n\n    props.actions.createNewForm({\n      formId: props.id,\n    });\n  }\n\n  handleOnSubmit = (e: React.SyntheticEvent) => {\n    const { actions, formManager, id: formId, onSubmit } = this.props;\n    let formFields: Array<Field> = [];\n    let isFormValid = false;\n    e.preventDefault();\n    actions.formSubmission({ formId });\n    formManager.forms.forEach((form) => {\n      if (form.formId === formId) {\n        isFormValid = form.isValid;\n        formFields = form.fields;\n      }\n    });\n\n    const fields = {} as FormFields;\n\n    formFields.forEach((field) => {\n      const fieldId = field.fieldId;\n      const fieldVal = field.value;\n      setKeyValue(fieldId)(fields)(fieldVal);\n    });\n\n    // Call the parent handler\n    typeof onSubmit === \"function\" && onSubmit(e, fields, isFormValid);\n  };\n\n  render() {\n    const { children, id: formId } = this.props;\n    return (\n      <form id={formId} onSubmit={this.handleOnSubmit}>\n        {children}\n      </form>\n    )\n  }\n}\n\nexport default Form;\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { RootState } from \"@reducers/index\";\nimport Form from \"@components/form\";\nimport * as notifyActions from \"@actions/global-notification.action\";\nimport * as formActions from \"@actions/form.action\";\n\n// Add all the actions\nconst actions: any = Object.assign({}, formActions, notifyActions);\n\nconst mapSateToProps = (state: RootState) => ({\n  formManager: state.formManager\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(Form);\n","import React from \"react\";\nimport InputField from \"@components/containers/input-field.container\";\nimport Layout from \"@components/layout\";\nimport { GlobalNotificationModel } from \"@models/global-notification.model\";\nimport { FormFields } from \"@models/form.model\";\nimport Link from \"@components/containers/link.container\";\nimport PrimaryButton from \"@components/containers/primary-button.container\";\nimport Form from \"@components/containers/form.container\";\n\ntype SignInProps = {\n  actions: any;\n  history: any;\n  notification: GlobalNotificationModel\n};\n\nconst SignInPage: React.FunctionComponent<SignInProps> = (props) => {\n  const { notify, notifyMessage, notifyType } = props.notification;\n  const { push } = props.history;\n  const formId = \"SIGN_IN\";\n\n  // Form submit handler\n  const handleOnSubmit = (e: React.SyntheticEvent, fields: FormFields, isFormValid: boolean) => {\n    if (isFormValid) {\n      props.actions.httpRequest({\n        data: {\n          email: fields.email_address,\n          password: fields.pwd\n        },\n        method: \"post\",\n        url: \"/account/login\"\n      });\n    }\n  };\n\n  return (\n    <Layout\n      notify={notify}\n      notifyMessage={notifyMessage}\n      notifyType={notifyType}\n      title=\"Sign in to your account 1234\"\n    >\n      <div>\n        <Form id={formId} onSubmit={handleOnSubmit}>\n          <InputField\n            formId={formId}\n            id=\"email_address\"\n            label=\"Email address (required)\"\n            type=\"email\"\n            validator=\"email\"\n          />\n          <InputField\n            formId={formId}\n            id=\"pwd\"\n            label=\"Password (required)\"\n            type=\"password\"\n            validator=\"default\"\n          />\n          <PrimaryButton type=\"submit\" id=\"sign_in\" value=\"Sign in\" />\n          <Link\n            type=\"button\"\n            id=\"createAccountLink\"\n            value=\"Create account\"\n            onClick={() => push(\"/createAccount\")}\n          />\n        </Form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SignInPage;\n","import { createAction } from \"redux-actions\";\nimport { HttpReqPayload } from \"@models/observable.model\";\nimport { HTTP_REQUEST } from \"@types\";\n\nexport const Type = {\n  HTTP_REQUEST,\n};\n\nexport const httpRequest = createAction<HttpReqPayload>(\n  Type.HTTP_REQUEST\n);\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { RootState } from \"@reducers/index\";\nimport SignInPage from \"@pages/sign-in.page\";\nimport * as notifyActions from \"@actions/global-notification.action\";\nimport * as formActions from \"@actions/form.action\";\nimport * as observableActions from \"@actions/observable.action\";\n\n// Add all the actions\nconst actions: any = Object.assign(\n  {},\n  formActions,\n  notifyActions,\n  observableActions\n);\n\nconst mapSateToProps = (state: RootState) => ({\n  notification: state.globalNotification\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(SignInPage);\n","import React from \"react\";\nimport Layout from \"@components/layout\";\nimport InputField from \"@components/containers/input-field.container\";\nimport { GlobalNotificationModel } from \"@models/global-notification.model\";\nimport Link from \"@components/containers/link.container\";\n\ntype CreateAccountProps = {\n  actions: any;\n  history: any;\n  notification: GlobalNotificationModel;\n};\n\nconst CreateAccount: React.FunctionComponent<CreateAccountProps> = (props) => {\n  const { push } = props.history;\n\n  const handleOnSubmit = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    // if (firstName && lastName && email && password) {\n    //   const response = await apis.createAccountApi(\n    //     firstName,\n    //     lastName,\n    //     email,\n    //     password,\n    //     props.actions\n    //   );\n    // }\n  };\n\n  const { notify, notifyMessage, notifyType } = props.notification;\n\n  return (\n    <Layout\n      notify={notify}\n      notifyMessage={notifyMessage}\n      notifyType={notifyType}\n      title=\"Create account\"\n    >\n      <div>\n        <form onSubmit={handleOnSubmit}>\n          <InputField\n            id=\"first_name\"\n            label=\"First name (required)\"\n            type=\"text\"\n          />\n          <InputField\n            id=\"last_name\"\n            label=\"Last name (required)\"\n            type=\"text\"\n          />\n          <InputField\n            id=\"email_address\"\n            label=\"Email address (required)\"\n            type=\"email\"\n            validator=\"email\"\n          />\n          <InputField\n            id=\"pwd\"\n            label=\"Password (required)\"\n            type=\"password\"\n            validator=\"password\"\n          />\n          <div className=\"primary\">\n            <button type=\"submit\" id=\"create_account\" value=\"Create Account\">\n              Create Account\n            </button>\n          </div>\n          <Link\n            type=\"button\"\n            id=\"signInLink\"\n            value=\"Sign in\"\n            onClick={() => push(\"/login\")}\n          />\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default CreateAccount;\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport CreateAccountPage from \"@pages/create-account.page\";\nimport { RootState } from \"@reducers/index\";\nimport * as notifyActions from \"@actions/global-notification.action\";\n\nconst actions: any = Object.assign({}, notifyActions);\n\nconst mapSateToProps = (state: RootState) => ({\n  notification: state.globalNotification,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(CreateAccountPage);\n","import React from \"react\";\nimport \"@styles/normalize.css\";\nimport \"@styles/user-layout.css\";\nimport { title } from \"process\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  notify: boolean;\n  notifyMessage: String;\n  notifyType: String;\n  title: String;\n};\n\nconst UserLayout: React.FunctionComponent<LayoutProps> = (props) => {\n  const { children, notifyMessage, notifyType, title } = props;\n  return (\n    <div className=\"profile\">\n      <header>\n        <h1>&#123; .js &#125;</h1>\n      </header>\n      <section className=\"breadcrumbs\">\n        <h2>{title}</h2>\n      </section>\n      {notifyMessage ? (\n        <section className=\"notification\">\n          <div className={`message ${notifyType}`}>{notifyMessage}</div>\n        </section>\n      ) : null}\n      <section className=\"main\">{children}</section>\n      <section className=\"footer\">\n        <footer>&#169; copyright 2020</footer>\n      </section>\n    </div>\n  );\n};\n\nexport default UserLayout;\n","import React from \"react\";\nimport InputField from \"@components/containers/input-field.container\";\nimport { UserProfileModel } from \"@models/user-profile.model\";\nimport { GlobalNotificationModel } from \"@models/global-notification.model\";\nimport UserLayout from \"@components/user-layout\";\nimport \"@styles/user-profile.css\";\n\ntype ProfileProps = {\n  actions: any;\n  notification: GlobalNotificationModel;\n  userProfileState: UserProfileModel;\n};\n\ntype ProfileState = {\n  nameEditable: boolean;\n  emailEditable: boolean;\n  phoneEditable: boolean;\n};\n\nexport class UserProfilePage extends React.Component<\n  ProfileProps,\n  ProfileState\n> {\n  state = {\n    nameEditable: false,\n    emailEditable: false,\n    phoneEditable: false,\n  };\n\n  toggleEditName = (e: React.SyntheticEvent, edit: boolean) => {\n    this.setState({\n      nameEditable: edit,\n    });\n  };\n\n  toggleEditEmail = (e: React.SyntheticEvent, edit: boolean) => {\n    this.setState({\n      emailEditable: edit,\n    });\n  };\n\n  toggleEditPhone = (e: React.SyntheticEvent, edit: boolean) => {\n    this.setState({\n      phoneEditable: edit,\n    });\n  };\n\n  render() {\n    const { userProfileState, notification } = this.props;\n    const { firstName, lastName, email, phoneNumber } = userProfileState;\n    const { notify, notifyMessage, notifyType } = notification;\n\n    return (\n      <UserLayout\n        notify={notify}\n        notifyMessage={notifyMessage}\n        notifyType={notifyType}\n        title=\"Update profile\"\n      >\n        <div className=\"editProfile\">\n          <ul>\n            <li>\n              <form>\n                <InputField\n                  editable={this.state.nameEditable}\n                  id=\"first_name\"\n                  label=\"First name (required)\"\n                  type=\"text\"\n                  value={firstName}\n                />\n                <InputField\n                  editable={this.state.nameEditable}\n                  id=\"last_name\"\n                  label=\"Last name (required)\"\n                  type=\"text\"\n                  value={lastName}\n                />\n                <div className=\"buttons\">\n                  {this.state.nameEditable ? (\n                    <>\n                      <div className=\"secondary\">\n                        <button\n                          type=\"button\"\n                          id=\"cancelEditName\"\n                          value=\"Cancel\"\n                          onClick={(e: React.SyntheticEvent) =>\n                            this.toggleEditName(e, false)\n                          }\n                        >\n                          Cancel\n                        </button>\n                      </div>\n                      <div className=\"primary\">\n                        <button type=\"submit\" id=\"updateName\" value=\"Submit\">\n                          Submit\n                        </button>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"buttonAsLink\">\n                      <button\n                        type=\"button\"\n                        id=\"editName\"\n                        value=\"Edit\"\n                        onClick={(e: React.SyntheticEvent) =>\n                          this.toggleEditName(e, true)\n                        }\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </li>\n            <li>\n              <form>\n                <InputField\n                  editable={this.state.emailEditable}\n                  id=\"email_address\"\n                  label=\"Email address (required)\"\n                  type=\"email\"\n                  value={email}\n                />\n                <div className=\"buttons\">\n                  {this.state.emailEditable ? (\n                    <>\n                      <div className=\"secondary\">\n                        <button\n                          type=\"button\"\n                          id=\"cancelEditEmail\"\n                          value=\"Cancel\"\n                          onClick={(e: React.SyntheticEvent) =>\n                            this.toggleEditEmail(e, false)\n                          }\n                        >\n                          Cancel\n                        </button>\n                      </div>\n                      <div className=\"primary\">\n                        <button type=\"submit\" id=\"updateEmail\" value=\"Submit\">\n                          Submit\n                        </button>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"buttonAsLink\">\n                      <button\n                        type=\"button\"\n                        id=\"editEmail\"\n                        value=\"Edit\"\n                        onClick={(e: React.SyntheticEvent) =>\n                          this.toggleEditEmail(e, true)\n                        }\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </li>\n            <li>\n              <form>\n                <InputField\n                  editable={this.state.phoneEditable}\n                  id=\"phone_number\"\n                  label=\"Phone number (required)\"\n                  type=\"email\"\n                  value={phoneNumber}\n                />\n                <div className=\"buttons\">\n                  {this.state.phoneEditable ? (\n                    <>\n                      <div className=\"secondary\">\n                        <button\n                          type=\"button\"\n                          id=\"cancelEditPhone\"\n                          value=\"Cancel\"\n                          onClick={(e: React.SyntheticEvent) =>\n                            this.toggleEditPhone(e, false)\n                          }\n                        >\n                          Cancel\n                        </button>\n                      </div>\n                      <div className=\"primary\">\n                        <button type=\"submit\" id=\"updatePhone\" value=\"Submit\">\n                          Submit\n                        </button>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"buttonAsLink\">\n                      <button\n                        type=\"button\"\n                        id=\"editPhoneNumber\"\n                        value=\"Edit\"\n                        onClick={(e: React.SyntheticEvent) =>\n                          this.toggleEditPhone(e, true)\n                        }\n                      >\n                        Edit\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </li>\n          </ul>\n        </div>\n      </UserLayout>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { UserProfilePage } from \"@pages/user-profile.page\";\nimport { RootState } from \"@reducers/index\";\nimport * as notifyActions from \"@actions/global-notification.action\";\n\n// Add all the actions\nconst actions: any = Object.assign({}, notifyActions);\n\nconst mapSateToProps = (state: RootState) => ({\n  notification: state.globalNotification,\n  userProfileState: state.userProfile,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapSateToProps, mapDispatchToProps)(UserProfilePage);\n","import React from \"react\";\nimport { Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport SignIn from \"@pages/containers/sign-in.container\";\nimport CreateAccount from \"@pages/containers/create-account.container\";\nimport UserProfile from \"@pages/containers/user-profile.container\";\nimport { history } from \"@store\";\n\nexport default () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/login\" />\n        <Route\n          exact\n          path=\"/login\"\n          component={SignIn}\n          key=\"acount-signin\"\n        />\n        <Route\n          exact\n          path=\"/createAccount\"\n          component={CreateAccount}\n          key=\"acount-create-account\"\n        />\n        <Route\n          exact\n          path=\"/user/profile\"\n          component={UserProfile}\n          key=\"acount-user-profile\"\n        />\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"react-router-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore, history } from \"./store\";\nimport Routes from \"./routes\";\n\n// create new store\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history} store={store}>\n        <Routes />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}